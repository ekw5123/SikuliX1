import org.junit.BeforeClass;
import org.sikuli.ide.SikulixIDE;
import org.junit.Test;
import org.sikuli.support.Commons;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class AlreadyOpenTests extends SikulixIDE{
    private static SikulixIDE ide;
    private static SikulixIDE.PaneContext pane;

    private static List<File> files;

    @BeforeClass
    public static void setUp() {
        SikulixIDE.start();
        ide = SikulixIDE.get();
        pane = ide.getContext();
        Commons.setTempFolder();

        files = new ArrayList<File>();
        for (int i = 0; i < 4; i++)
        {
            File f = new File("./tmp/testFile"+i+".txt");
            files.add(f);
        }
    }


    public static class PaneContext {
        File file;
        File folder;
        int pos;

        PaneContext(File file, File folder, int pos) {
            this.file = file;
            this.folder = folder;
            this.pos = pos;
        }
    }

    @Test
    public void testAlreadyOpenFileFound() {
        File f = files.get(0);
        ide.createFileContext(f);

        assertEquals("Returns the position of the file.", 1, ide.alreadyOpen(f));
    }

    @Test
    public void testAlreadyOpenMultipleFiles() {
        File testFile2 = files.get(2);
        ide.createFileContext(testFile2);
        //Note that the file opened above in testAlreadyOpenFileFound is still open

        assertEquals("Returns the position of the file.", 2, ide.alreadyOpen(testFile2));
    }


    @Test
    public void testAlreadyOpen_FileNotFound() {
        File testFile = files.get(1); //Never added

        assertEquals("Returns -1 when file is not found.", -1, ide.alreadyOpen(testFile));
    }
}
